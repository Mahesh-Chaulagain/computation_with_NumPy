# NumPy: 
-> Numerical Python
-> the standard for working with numerical data in python
-> Pandas: a high-level data manipulation tool that includes functionality for working with time-series or for
	   grouping, joining, merging and finding missing data 
-> NumPy: low-level tasks like doing serious math and calculation

# ndarray:
-> a homogenous n-dimensional array object
-> python list and pandas dataframe can contain a mix of strings, numbers, or objects(i.e mix of different types)
-> homogenous means all data have to have the same data type for e.g. all floating point numbers
-> n-dimensional means we can work with everything from a single column(1-dimensional) to the matrix(2-dimensional)
   to a bunch of matrices stacked in top of each other(n-dimensional)

# 1-dimensional:
-> a vector
-> create: my_array = np.array([1.1,9.3,8.5,4.3])
-> see its shape i.e my_array.shape
-> accessing elements in ndarray is similar to python list - by using element's index i.e my_array[2]
-> check dimension with the ndim attribute i.e my_array.ndim

# 2-dimensional:
-> a matrix
-> create: array_2d = np.array([[1,2,3,4],[5,6,7,8]])
   we have two pair of square brackets. this array has 2 rows and 4 columns. NumPy refers to the dimensions as axes, so the first
   axis has length 2 and the second axis has the length 4.
-> check dimension: array_2d.ndim
-> check shape: array_2d.shape
-> check number of rows: array_2d.shape[0] and columns: array_2d.shape[1]
-> access a particular row or a particular value with the square bracket notation. To access a particluar value, you have to provide
   index for each dimension. we have two dimension so we need to provide an index for the row and the column. 
   To access third value in second row: array_2d[1,2]
-> to access an entire row and all the values therein, use the : operator like in a Python list
   access entire first row: array_2d[0,:]

# n-dimesnional:
-> an array of 3 dimensions or higher is refered to as a "tensor"
-> create array as
   mystery_array = np.array([[[0, 1, 2, 3],
                           [4, 5, 6, 7]],
                        
                         [[7, 86, 6, 98],
                          [5, 1, 0, 4]],
                          
                          [[5, 36, 32, 48],
                           [97, 0, 27, 18]]])

-> check dimension: mystery_array.ndim
-> view shape mystery_array.shape
-> elements along each axis: print(mystery_array.shape[0],mystery_array.shape[1],mystery_array.shape[-1])
-> retrive all the elements on the third axis that are at postion 2 on the first axis and position 1 on the second axis:
   mystery_array[2,1,:]